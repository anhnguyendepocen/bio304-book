[
["index.html", "Biology 304: Biological Data Analysis Chapter 1 Introduction 1.1 How to use these lecture notes", " Biology 304: Biological Data Analysis Paul M. Magwene 2018-08-27 Chapter 1 Introduction 1.1 How to use these lecture notes In this and future materials to be posted on the course website you’ll encounter blocks of R code. Your natural intuition will be to cut and paste commands or code blocks into the R interpretter to save yourself the typing. DO NOT DO THIS!! In each of the examples below, I provide example input, but I don’t show you the output. It’s your job to type in these examples at the R console, evaluate what you typed, and to look at and think critically about the output. You will make mistakes and generate errors! Part of learning any new skill is making mistakes, figuring out where you went wrong, and correcting those mistakes. In the process of fixing those errors, you’ll learn more about how R works, and how to avoid such errors, or correct bugs in your own code in the future. If you cut and paste the examples into the R interpretter the code will run, but you will learn less than if you input the code yourself and you’ll be less capable of apply the concepts in new situations. The R interpretter, like all programming languages, is very exacting. A mispelled variable or function name, a stray period, or an unbalanced parenthesis will raise an error and finding the sources of such errors can sometimes be tedious and frustrating. Persist! If you read your code critically, think about what your doing, and seek help when needed (teaching team, R help, Google, etc) you’ll eventually get better at debugging your code. But keep in mind that like most new skills, learning to write and debug your code efficiently takes time and experience. "],
["data-story-women-and-children-first-on-the-titanic.html", "Chapter 2 Data story: Women and children first on the Titanic? 2.1 Background 2.2 Dataset 2.3 Libraries 2.4 Read data 2.5 What’s in the data? 2.6 Categorizing passengers 2.7 How does class affect survival? 2.8 Passenger ages 2.9 How does age relate to survival? 2.10 Conclusion", " Chapter 2 Data story: Women and children first on the Titanic? This introductory chapter illustrates some of the tools and concepts you’ll learn in this class, such as visualization, data restructuring, and model building. By the end of this course, you should be able to carry out similar analyses and make well reasoned interpreation of those analyses for a variety of complex biological data. 2.1 Background On April 10, 1912 the RMS Titanic left Southhampton, England headed for New York. Aboard were 2,435 passengers and 892 crew members. Five days later, about 20 minutes before midnight, the Titanic hit an iceberg in the frigid waters about 375 miles south of New Foundland. Within approximately two and a half hours the ship had split apart and sunk, leaving just over 700 survivors. The Titanic 2.2 Dataset The titanic_data.csv file (available on the course git repository) containers information on 1309 passengers from aboard the Titanic (CSV stands for Comma-Separated-Values, a simple plain text format for storing spreadhsheet data). Variables in this data set include gender, age, ticketed class, the passenger’s destitation, whether they survived, etc. We’ll use this data set to explore some of the demographics of the passengers who were aboard the ship, and how their relationship to whether a passenger survived or not. For a detailed description of this data set, see this link. We’ll use this data to explore whether the saying “Women and children first!” applied on the Titanic. 2.3 Libraries First we’ll load some R libraries (packages) that contain useful functions that will make our analyses quicker and more efficient. We’ll discuss the functions that these libraries provide, and how to use libraries in general, in greater detail in a future lecture. library(ggplot2) library(readr) library(dplyr) library(tidyr) library(forcats) 2.4 Read data We start by reading in the data from the CSV file. titanic &lt;- read_csv(&quot;~/Downloads/titanic_data.csv&quot;) Parsed with column specification: cols( pclass = col_integer(), survived = col_integer(), name = col_character(), sex = col_character(), age = col_double(), sibsp = col_integer(), parch = col_integer(), ticket = col_character(), fare = col_double(), cabin = col_character(), embarked = col_character(), boat = col_character(), body = col_integer(), home.dest = col_character() ) The function read_csv does exactly what it advertises – reads a data set from a CSV file and returns it as an object we can compute on. In this case we assigned the variable name titanic to our data set. Simple enough! 2.5 What’s in the data? The function read_csv returns a table, where the columns represent the variables of interest (e.g. sex, age, etc) and the rows represent individuals or observations. Let’s take a look: titanic # A tibble: 1,309 x 14 pclass survived name sex age sibsp parch ticket fare cabin &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; 1 1 1 Alle… fema… 29 0 0 24160 211.3 B5 2 1 1 Alli… male 0.9167 1 2 113781 151.6 C22 … 3 1 0 Alli… fema… 2 1 2 113781 151.6 C22 … 4 1 0 Alli… male 30 1 2 113781 151.6 C22 … 5 1 0 Alli… fema… 25 1 2 113781 151.6 C22 … 6 1 1 Ande… male 48 0 0 19952 26.55 E12 7 1 1 Andr… fema… 63 1 0 13502 77.96 D7 8 1 0 Andr… male 39 0 0 112050 0 A36 9 1 1 Appl… fema… 53 2 0 11769 51.48 C101 10 1 0 Arta… male 71 0 0 PC 17… 49.50 &lt;NA&gt; # ... with 1,299 more rows, and 4 more variables: embarked &lt;chr&gt;, # boat &lt;chr&gt;, body &lt;int&gt;, home.dest &lt;chr&gt; If we simply wanted the dimensions of the data we could do: dim(titanic) [1] 1309 14 whereas, if we wanted to get a list of the column names in the data we could do: names(titanic) [1] &quot;pclass&quot; &quot;survived&quot; &quot;name&quot; &quot;sex&quot; &quot;age&quot; [6] &quot;sibsp&quot; &quot;parch&quot; &quot;ticket&quot; &quot;fare&quot; &quot;cabin&quot; [11] &quot;embarked&quot; &quot;boat&quot; &quot;body&quot; &quot;home.dest&quot; 2.5.1 Simple data wrangling Two variables of interest to us are pclass (“passenger class”) and survived. These are categorical variables encoded as numbers. Before exploring the data we’re going to create derived “factor” variables from these, which will make our analyses more convenient. I’m also going to recode the “survived” information as the classes “died” and “lived”. titanic &lt;- mutate(titanic, passenger.class = fct_recode(as.factor(pclass), &quot;1st&quot; = &quot;1&quot;, &quot;2nd&quot; = &quot;2&quot;, &quot;3rd&quot; = &quot;3&quot;), survival = fct_recode(as.factor(survived), &quot;died&quot; = &quot;0&quot;, &quot;lived&quot; = &quot;1&quot;)) Having added to new variables to our data set, the dimensions and column names have changed: dim(titanic) [1] 1309 16 and names(titanic) [1] &quot;pclass&quot; &quot;survived&quot; &quot;name&quot; [4] &quot;sex&quot; &quot;age&quot; &quot;sibsp&quot; [7] &quot;parch&quot; &quot;ticket&quot; &quot;fare&quot; [10] &quot;cabin&quot; &quot;embarked&quot; &quot;boat&quot; [13] &quot;body&quot; &quot;home.dest&quot; &quot;passenger.class&quot; [16] &quot;survival&quot; Note that there are now 16 columns in our data, the original 14 plus our two new derived variables passenger.class and survival. 2.6 Categorizing passengers Let’s start by exploring various aspects of the 1309 passengers in our data set. First, let’s break them down by class: count(titanic, passenger.class) # A tibble: 3 x 2 passenger.class n &lt;fct&gt; &lt;int&gt; 1 1st 323 2 2nd 277 3 3rd 709 We could also represent this data as a bar graph (though a simple table is more efficient in this case): ggplot(titanic) + geom_bar(aes(x = passenger.class)) Both our table and bar graph tell us that the largest number of passengers (in the available data) were travelling on third-class tickets. The numbers of first- and second-class ticketed passengers are fairly similar. 2.6.1 How many male and female passengers? Let’s look at the gender breakdown: count(titanic, sex) # A tibble: 2 x 2 sex n &lt;chr&gt; &lt;int&gt; 1 female 466 2 male 843 ggplot(titanic) + geom_bar(aes(x = sex, fill = sex)) There are almost twice as many men in our data set as women. 2.6.2 How many people survived? Now let’s look at survival information: count(titanic, survival) # A tibble: 2 x 2 survival n &lt;fct&gt; &lt;int&gt; 1 died 809 2 lived 500 ggplot(titanic) + geom_bar(aes(x = survival)) 2.6.3 Women first? We can take our simple explorations a step further, by considering the joint counts of passengers with respect to multiple variables. For example, let’s look at the relationship between gender and survival: count(titanic, sex, survival) # A tibble: 4 x 3 sex survival n &lt;chr&gt; &lt;fct&gt; &lt;int&gt; 1 female died 127 2 female lived 339 3 male died 682 4 male lived 161 2.6.3.1 Contingency tables When looking at counts of multiple variables simultaneously, a more traditional representation than the one above is a “contingency table”. The cells in a contingency table give the counts of individuals with respect to combinations of variables (e.g. # of women who survived, # of women who died, etc). Here’s the same data on sex and survival reprsented as a contingency table: count(titanic, sex, survival) %&gt;% spread(survival, n) # A tibble: 2 x 3 sex died lived &lt;chr&gt; &lt;int&gt; &lt;int&gt; 1 female 127 339 2 male 682 161 In the code above the symbol %&gt;% can be read as “pipe” or “send”. The pipe operator inserts the object before the pipe as the first argument to the function after the pipe. Here we’re piping the output of the count function as the input into the spread function. We’ll see in later lectures that piping objects makes for very powerful workflows when we do more sophisticated analyses. We can also create a bar plot to represent the contingency table: ggplot(titanic) + geom_bar(aes(sex, fill = survival)) 2.6.4 A bar plot using proportions rather than counts Sometimes it’s useful to look at proportions rather than absolute numbers. Here’s a figure that allows us to visually assess the different proportions of men and women passengers who survived: ggplot(titanic) + geom_bar(aes(sex, fill = survival), position = &quot;fill&quot;) 2.6.5 Mosaic plots A slightly more sophisticated version of a bar plot is called a “mosaic plot”. A mosaic plot is similar to a proportional bar plot but the width of the bars also varies, indicating the relative numbers of observations in each class. To create a mosaic plot we need to import the geom_mosaic function from a library called ggmosaic. library(ggmosaic) ggplot(titanic) + geom_mosaic(aes(x = product(sex), fill = survival)) + labs(x = &quot;Sex&quot;, y = &quot;Proportion surviving&quot;) As you can see, the mosaic plot emphasizes both that there were more men than women on the Titanic, as well as the fact that a greater fraction of women survived. This seems like strong evidence for the first part of the phrase “Women and children first”. 2.7 How does class affect survival? A passenger’s ticket class (a proxy for socioeconomic status) is another interesting variable to consider in conjunction with sex and survival. Here is a bar plot that takes into account all three of these variables, by representing passenger class as a “facet” variable – we create different subplots for each class grouping. ggplot(titanic) + geom_bar(aes(sex, fill = survival), position = &quot;fill&quot;) + facet_wrap(~ passenger.class) + labs(y = &quot;Portion Died/Lived&quot;, title = &quot;Titanic Survival by Sex and Class&quot;) 2.8 Passenger ages Let’s create a plot to better understand the distribution of ages of passengers on the Titanic. A histogram is a common way to visualize the distribution of a continuous variable. Creating a histogram is a simple modification of our earlier examples where we created bar plots. ggplot(titanic) + geom_histogram(aes(x = age), bins = 35) The histogram provides a quick visual representation of the frequency of different age groups. It appears that the the most common (modal) value of age is a little over 20 years old. We can explicitly calculate the mean and median age as follows: mean(titanic$age, na.rm = TRUE) [1] 29.88113 median(titanic$age, na.rm = TRUE) [1] 28 Note that we have to explicitly tell the mean and median functions to drop any missing (NA) values. Alternately, we could have use pipes to calculate the mean and median as so: titanic %&gt;% filter(!is.na(age)) %&gt;% summarize(mean(age), median(age)) # A tibble: 1 x 2 `mean(age)` `median(age)` &lt;dbl&gt; &lt;dbl&gt; 1 29.88 28 2.9 How does age relate to survival? Now we turn to the question of how age relates to the probability of survival. Age is a continuous variable, while survival is a binary variable. 2.9.1 Strip charts We’ll start by creating “strip charts” that plot age on the y-axis, and survival on the x-axis. First we filter out individuals for which we have no age data, then we use a pipe to send the filtered data to the ggplot function: titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_jitter(aes(survival, age), width = 0.1, alpha = 0.5) Recall that sex was an important variable in our earlier assessment of the data. Let’s create a second strip plot that takes into account both age and sex. titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_jitter(aes(survival, age, color = sex), width = 0.1, alpha = 0.5) + facet_wrap(~sex) 2.9.2 Box plots Another way to look at the data is to use a summary figure called a “box plot”. First the simple boxplot, relating age and survival: titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_boxplot(aes(survival, age)) A box plot depicts information about the median value (thick central line), the first and third quartiles (lower 25% value, upper 75% value) and outliers. From this simple boxplot, it doesn’t look like there is a great difference in the age distribution of passengers who lived vs died. Now we look at box plott for age-by-survival, conditioned on sex. titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_boxplot(aes(survival, age, fill = sex)) + facet_wrap(~sex) Here we start to see a more interesting pattern. When comparing male passengers, the median age of survivors appears to be a little younger than those who died. However, when comparing female passengers the opposite pattern seems to be at play. 2.9.3 Fitting a model relating survival to age and sex We can get more sophisticated by fitting a formal model to our data. Here we use a technique called logistic regression to model the probability of survival as a function of age, broken down for female and male passengers separately. titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot(aes(x = age, y = survived, color = sex)) + geom_jitter(height = 0.05, alpha = 0.35) + geom_smooth(method=&quot;glm&quot;, method.args = list(family=&quot;binomial&quot;)) + facet_wrap(~sex) + labs(x = &quot;Age&quot;, y = &quot;Probability of survival&quot;) The logistic regression model fit here, seems to support the trend we saw in the box plots. When breaking the data down by sex we find that there is a decreasing probability of survival as age increases for male passengers, but the opposite trend for female passengers. This is pretty interesting – “children first” seemed to hold for men but not for women. 2.9.4 Extending the logistic regression model to consider class, age, and sex Now let’s add ticketing class into the mix again. Here we treat both sex and passenger class as faceting variables, fitting six different logistic regression models (all combinations of the three classes and two sexes). titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot(aes(x = age, y = survived, color = sex)) + geom_jitter(height = 0.05, alpha = 0.35) + geom_smooth(method=&quot;glm&quot;, method.args = list(family=&quot;binomial&quot;)) + facet_grid(passenger.class~sex) + labs(x = &quot;Age&quot;, y = &quot;Probability of survival&quot;) By conditioning on both sex and ticketing class, we gain even more insights into the data and our assesments of relationships between variables can change. For female passengers, ticketed class appears to have a strong influence on the relationship between age and survival. We see that almost all of the female first-class passengers survived, and the relationship between age and survival is thus flat. The second class female passengers are fairly similar, though with a slight decrease in the probability of survival among the oldest passengers. It’s not until we get to the third class passengers that we see a strong indication of the “children first” relationship playing out in terms of survival. For the male passengers, the “children first” model seems to fit across classes, but note the generally lower probability of survival across ages when comparing first and third class passengers. 2.10 Conclusion We’ve only scratched the surface of the possible explorations we could undertake of this intersting data set. However, this introductory “data story” illustrates many of the tools and ideas we’ll encounter in this class. You’ll be undertaking even more complex data explorations on your own by the end of the semester! "],
["getting-started-with-r.html", "Chapter 3 Getting Started with R 3.1 What is R? 3.2 What is RStudio? 3.3 Entering commands in the console 3.4 Comments 3.5 Using R as a Calculator 3.6 Numeric data types in R 3.7 Variable assignment in R 3.8 Working with Vectors in R 3.9 The R Help System 3.10 Packages", " Chapter 3 Getting Started with R 3.1 What is R? R is a statistical computing environment and programming language. It is free, open source, and has a large and active community of developers and users. There are many different R packages (libraries) available for conducting out a wide variety of different analyses, for everything from genome sequence data to geospatial information. 3.2 What is RStudio? RStudio (http://www.rstudio.com/) is an open source integrated development environment (IDE) that provides a nicer graphical interface to R than does the default R GUI. The figure below illustrates the RStudio interface, in it’s default configuration. For the exercises below you’ll be primarily entering commands in the “console” window. We’ll review key parts of the RStudio interface in greater detail in class. Figure 3.1: RStudio window with the panes labeled 3.3 Entering commands in the console You can type commands directly in the console. When you hit Return (Enter) on your keyboard the text you typed is evaluated by the R interpreter. This means that the R program reads your commands, makes sure there are no syntax errors, and then carries out any commands that were specified. Try evaluating the following arithmetic commands in the console: 10 + 5 [1] 15 10 - 5 [1] 5 10 / 5 [1] 2 10 * 5 [1] 50 If you type an incomplete command and then hit Return on your keyboard, the console will show a continuation line marked by a + symbol. For example enter the incomplete statement (10 + 5 and then hit Enter. You should see something like this. &gt; (10 + 5 + The continuation line tells you that R is waiting for additional input before it evaluates what you typed. Either complete your command (e.g. type the closing parenthesis) and hit Return, or hit the “Esc” key to exit the continuation line without evaluating what you typed. 3.4 Comments When working in the R console, or writing R code, the pound symbol (#) indicates the start of a comment. Anything after the #, up to the end of the current line, is ignored by the R interpretter. # This line will be ignored 5 + 4 # the first part of this line, up to the #, will be evaluated [1] 9 Throughout this course I will often include short explanatory comments in my code examples. 3.5 Using R as a Calculator The simplest way to use R is as a fancy calculator. 10 + 2 # addition 10 - 2 # subtraction 10 * 2 # multiplication 10 / 2 # division 10 ^ 2 # exponentiation 10 ** 2 # alternate exponentiation pi * 2.5^2 # R knows about some constants such as Pi 10 %% 3 # modulus operator -- gives remainder after division 10 %/% 3 # integer division Be aware that certain operators have precedence over others. For example multiplication and division have higher precedence than addition and subtraction. Use parentheses to disambiguate potentially confusing statements. (10 + 2)/4-5 # was the output what you expected? [1] -2 (10 + 2)/(4-5) # compare the answer to the above [1] -12 Division by zero produces an object that represents infinite numbers. Infinite values can be either positive or negative 1/0 # Inf [1] Inf -1/0 # -Inf [1] -Inf Invalid calculations produce a objected called NaN which is short for “Not a Number”: 0/0 # invalid calculation [1] NaN 3.5.1 Common mathematical functions Many commonly used mathematical functions are built into R. Here are some examples: abs(-3) # absolute value [1] 3 abs(3) [1] 3 cos(pi/3) # cosine [1] 0.5 sin(pi/3) # sine [1] 0.8660254 log(10) # natural logarithm [1] 2.302585 log10(10) # log base 10 [1] 1 log2(10) # log base 2 [1] 3.321928 exp(1) # exponential function [1] 2.718282 sqrt(10) # square root [1] 3.162278 10 ^ 0.5 # same as square root [1] 3.162278 3.6 Numeric data types in R There are three standard types of numbers in R. You can use the function typeof() to get information about an objects type in R. “double” – this is the default numeric data type, and is used to represent both real numbers and whole numbers (unless you explicitly ask for integers, see below). “double” is short for “double precision floating point value”. All of the previous computations you’ve seen up until this point used data of type double. ```r typeof(10.0) # real number [1] &quot;double&quot; typeof(10) # whole numbers default to doubles [1] &quot;double&quot; ``` “integer” – when your numeric data involves only whole numbers, you can get slighly better performance using the integer data type. You must explicitly ask for numbers to be treated as integers. ```r typeof(as.integer(10)) # now treated as an integer [1] &quot;integer&quot; ``` “complex” – R has a built-in data type to represent complex numbers – numbers with a “real” and “imaginary” component. We won’t encounter the use of complex numbers in this course, but they do have many important uses in mathematics and engineering and also have some interesting applications in biology. ```r typeof(1 + 0i) [1] &quot;complex&quot; sqrt(-1) # sqrt of -1, using doubles [1] NaN sqrt(-1 + 0i) # sqrt of -1, using complex numbers [1] 0+1i ``` 3.7 Variable assignment in R An important programming concept in all programming languages is that of “variable assignment”. Variable assignment is the act of creating labels that point to particular data values in a computers memory, which allows us to apply operations to the labels rather than directly to specific. Variable assignment is an important mechanism of abstracting and generalizing computational operations. Variable assignment in R is accomplished with the assignment operator, which is designated as &lt;- (left arrow, constructed from a left angular brack and the minus sign). This is illustrated below: x &lt;- 10 # assign the variable name &#39;x&#39; the value 10 sin(x) # apply the sin function to the value x points to [1] -0.5440211 x &lt;- pi # x now points to a different value sin(x) # the same function call now produces a different result [1] 1.224647e-16 3.7.1 Valid variable names As described in the R documentation, “A syntactically valid name consists of letters, numbers and the dot or underline characters and starts with a letter or the dot not followed by a number. Names such as ‘.2way’ are not valid, and neither are the reserved words.” Here are some examples of valid and invalid variable names. Mentally evaluate these based on the definition above, and then evaluate these in the R interpetter to confirm your understanding : x &lt;- 10 x.prime &lt;- 10 x_prime &lt;- 10 my.long.variable.name &lt;- 10 another_long_variable_name &lt;- 10 _x &lt;- 10 .x &lt;- 10 2.x &lt;- 2 * x 3.8 Working with Vectors in R Vectors are the core data structure in R. Vectors store an ordered lists of items, all of the same type. Learning to compute effectively with vectors and one of the keys to efficient R programming. Vectors in R always have a type (accessed with the typeof() function) and a length (accessed with the length() function). The simplest way to create a vector at the interactive prompt is to use the c() function, which is short hand for combine' orconcatenate’. x &lt;- c(2,4,6,8) # create a vector, assignn it the variable name `x` length(x) [1] 4 typeof(x) [1] &quot;double&quot; You can also use c() to concatenate two or more vectors together. y &lt;- c(1,3,5,7,9) # create another vector, labeled y xy &lt;- c(x,y) # combine two vectors z &lt;- c(pi/4, pi/2, pi, 2*pi) xyz &lt;- c(x, y, z) # combine three vectors 3.8.1 Vector Arithmetic The basic R arithmetic operations work on vectors as well as on single numbers (in fact single numbers are vectors). x &lt;- c(2, 4, 6, 8, 10) x * 2 # multiply each element of x by 2 [1] 4 8 12 16 20 x - pi # subtract pi from each element of x [1] -1.1415927 0.8584073 2.8584073 4.8584073 6.8584073 y &lt;- c(0, 1, 3, 5, 9) x + y # add together each matching element of x and y [1] 2 5 9 13 19 x * y # multiply each matching element of x and y [1] 0 4 18 40 90 x/y # divide each matching element of x and y [1] Inf 4.000000 2.000000 1.600000 1.111111 Basic numerical functions operate element-wise on numerical vectors: sin(x) [1] 0.9092974 -0.7568025 -0.2794155 0.9893582 -0.5440211 cos(x * pi) [1] 1 1 1 1 1 log(x) [1] 0.6931472 1.3862944 1.7917595 2.0794415 2.3025851 3.8.2 Vector recycling When vectors are not of the same length R `recycles’ the elements of the shorter vector to make the lengths conform. x &lt;- c(2, 4, 6, 8, 10) length(x) [1] 5 z &lt;- c(1, 4, 7, 11) length(z) [1] 4 x + z [1] 3 8 13 19 11 In the example above z was treated as if it was the vector (1, 4, 7, 11, 1). 3.8.3 Simple statistical functions for numeric vectors Now that we’ve introduced vectors as the simplest data structure for holding collections of numerical values, we can introduce a few of the most common statistical functions that operate on such vectors. First let’s create a vector to hold our sample data of interest. Here I’ve taken a random sample of the lengths of the last names of students enrolled in Bio 723 during Spring 2018. len.name &lt;- c(7, 7, 6, 2, 9, 9, 7, 4, 10, 5) Some common statistics of interest include minimum, maximum, mean, median, variance, and standard deviation: min(len.name) [1] 2 max(len.name) [1] 10 mean(len.name) [1] 6.6 median(len.name) [1] 7 var(len.name) # variance [1] 6.044444 sd(len.name) # standard deviation [1] 2.458545 The summary() function applied to a vector of doubles produce a useful table of some of these key statistics: summary(len.name) Min. 1st Qu. Median Mean 3rd Qu. Max. 2.00 5.25 7.00 6.60 8.50 10.00 3.9 The R Help System R comes with fairly extensive documentation and a simple help system. You can access HTML versions of the R documentation under the Help tab in Rstudio. The HTML documentation also includes information on any packages you’ve installed. Take a few minutes to browse through the R HTML documentation. In addition to the HTML documentation there is also a search box where you can enter a term to search on (see red arrow in figure below). Figure 3.2: The RStudio Help tab 3.9.1 Getting help from the console In addition to getting help from the RStudio help tab, you can directly search for help from the console. The help system can be invoked using the help function or the ? operator. help(&quot;log&quot;) ?log If you are using RStudio, the help results will appear in the “Help” tab of the Files/Plots/Packages/Help/Viewer (lower right window by default). What if you don’t know the name of the function you want? You can use the help.search() function. help.search(&quot;log&quot;) In this case help.search(&quot;log&quot;) returns all the functions with the string log in them. For more on help.search type ?help.search. Other useful help related functions include apropos() and example(). apropos returns a list of all objects (including function names) in the current session that match the input string. apropos(&quot;log&quot;) [1] &quot;annotation_logticks&quot; &quot;as.data.frame.logical&quot; [3] &quot;as.logical&quot; &quot;as.logical.factor&quot; [5] &quot;col_logical&quot; &quot;dlogis&quot; [7] &quot;GeomLogticks&quot; &quot;is.logical&quot; [9] &quot;log&quot; &quot;log10&quot; [11] &quot;log1p&quot; &quot;log2&quot; [13] &quot;logb&quot; &quot;Logic&quot; [15] &quot;logical&quot; &quot;logLik&quot; [17] &quot;loglin&quot; &quot;parse_logical&quot; [19] &quot;plogis&quot; &quot;qlogis&quot; [21] &quot;read_log&quot; &quot;rlogis&quot; [23] &quot;scale_x_log10&quot; &quot;scale_y_log10&quot; [25] &quot;SSlogis&quot; &quot;tokenizer_log&quot; example() provides examples of how a function is used. example(log) log&gt; log(exp(3)) [1] 3 log&gt; log10(1e7) # = 7 [1] 7 log&gt; x &lt;- 10^-(1+2*1:9) log&gt; cbind(x, log(1+x), log1p(x), exp(x)-1, expm1(x)) x [1,] 1e-03 9.995003e-04 9.995003e-04 1.000500e-03 1.000500e-03 [2,] 1e-05 9.999950e-06 9.999950e-06 1.000005e-05 1.000005e-05 [3,] 1e-07 1.000000e-07 1.000000e-07 1.000000e-07 1.000000e-07 [4,] 1e-09 1.000000e-09 1.000000e-09 1.000000e-09 1.000000e-09 [5,] 1e-11 1.000000e-11 1.000000e-11 1.000000e-11 1.000000e-11 [6,] 1e-13 9.992007e-14 1.000000e-13 9.992007e-14 1.000000e-13 [7,] 1e-15 1.110223e-15 1.000000e-15 1.110223e-15 1.000000e-15 [8,] 1e-17 0.000000e+00 1.000000e-17 0.000000e+00 1.000000e-17 [9,] 1e-19 0.000000e+00 1.000000e-19 0.000000e+00 1.000000e-19 3.10 Packages Packages are libraries of R functions and data that provide additional capabilities and tools beyond the standard library of functions included with R. Hundreds of people around the world have developed packages for R that provide functions and related data structures for conducting many different types of analyses. Throughout this course you’ll need to install a variety of packages. Here I show the basic procedure for installing new packages from the console as well as from the R Studio interface. 3.10.1 Installing packages from the console The built-in function install.packages provides a quick and conveniet way to install packages from the R console. 3.10.2 Install the tidyverse package To illustrate the use of install.package, we’ll install a collection of packages (a “meta-package”) called the tidyverse. Here’s how to install the tidyverse meta-package from the R console: install.packages(&quot;tidyverse&quot;, dependencies = TRUE) The first argument to install.packages gives the names of the package we want to install. The second argument, dependencies = TRUE, tells R to install any additional packages that tidyverse depends on. 3.10.3 Installing packages from the RStudio dialog You can also install packages using a graphical dialog provided by RStudio. To do so pick the Packages tab in RStudio, and then click the Install button. Figure 3.3: The Packages tab in RStudio In the packages entry box you can type the name of the package you wish to install. 3.10.4 Install the stringr package Let’s install another useful package called “stringr”. Type the package name in the “Packages” field, make sure the “Install dependencies” check box is checked, and then press the “Install” button. Figure 3.4: Package Install Dialog 3.10.5 Loading packages with the library() function Once a package is installed on your computer, the package can be loaded into your R session using the library function. To insure our previous install commands worked correctly, let’s load the packages we just installed. library(stringr) library(tidyverse) Since the tidyverse pacakge is a “meta-package” it provides some additional info about the sub-packages that got loaded. When you load tidyverse, you will also see a message about “Conflicts” as several of the functions provided in the dplyr package (a sub-package in tidyverse) conflict with names of functions provided by the “stats” package which usually gets automically loaded when you start R. The conflicting funcdtions are filter and lag. The conflicting functions in the stats package are lag and filter which are used in time series analysis. The dplyr functions are more generally useful. Furthermore, if you need these masked functions you can still access them by prefacing the function name with the name of the package (e.g. stats::filter). "]
]
