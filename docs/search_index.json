[
["index.html", "Biology 304: Biological Data Analysis Chapter 1 Introduction 1.1 How to use these lecture notes", " Biology 304: Biological Data Analysis Paul M. Magwene 2018-08-30 Chapter 1 Introduction 1.1 How to use these lecture notes In this and future materials to be posted on the course website you’ll encounter blocks of R code. Your natural intuition will be to cut and paste commands or code blocks into the R interpretter to save yourself the typing. DO NOT DO THIS!! In each of the examples below, I provide example input, but I don’t show you the output. It’s your job to type in these examples at the R console, evaluate what you typed, and to look at and think critically about the output. You will make mistakes and generate errors! Part of learning any new skill is making mistakes, figuring out where you went wrong, and correcting those mistakes. In the process of fixing those errors, you’ll learn more about how R works, and how to avoid such errors, or correct bugs in your own code in the future. If you cut and paste the examples into the R interpretter the code will run, but you will learn less than if you input the code yourself and you’ll be less capable of apply the concepts in new situations. The R interpretter, like all programming languages, is very exacting. A mispelled variable or function name, a stray period, or an unbalanced parenthesis will raise an error and finding the sources of such errors can sometimes be tedious and frustrating. Persist! If you read your code critically, think about what your doing, and seek help when needed (teaching team, R help, Google, etc) you’ll eventually get better at debugging your code. But keep in mind that like most new skills, learning to write and debug your code efficiently takes time and experience. "],
["data-story-women-and-children-first-on-the-titanic.html", "Chapter 2 Data story: Women and children first on the Titanic? 2.1 Background 2.2 Dataset 2.3 Libraries 2.4 Read data 2.5 What’s in the data? 2.6 Categorizing passengers 2.7 Passenger ages 2.8 How does age relate to survival? 2.9 How does class affect survival? 2.10 Conclusion", " Chapter 2 Data story: Women and children first on the Titanic? This introductory chapter illustrates some of the tools and concepts you’ll learn in this class, such as visualization, data restructuring, and model building. By the end of this course, you should be able to carry out similar analyses and make well reasoned interpreation of those analyses for a variety of complex biological data. 2.1 Background On April 10, 1912 the RMS Titanic left Southhampton, England headed for New York. Aboard were 2,435 passengers and 892 crew members. Five days later, about 20 minutes before midnight, the Titanic hit an iceberg in the frigid waters about 375 miles south of New Foundland. Within approximately two and a half hours the ship had split apart and sunk, leaving just over 700 survivors. The Titanic 2.2 Dataset The titanic_data.csv file (available on the course git repository) containers information on 1309 passengers from aboard the Titanic (CSV stands for Comma-Separated-Values, a simple plain text format for storing spreadhsheet data). Variables in this data set include gender, age, ticketed class, the passenger’s destitation, whether they survived, etc. We’ll use this data set to explore some of the demographics of the passengers who were aboard the ship, and how their relationship to whether a passenger survived or not. For a detailed description of this data set, see this link. We’ll use this data to explore whether the saying “Women and children first!” applied on the Titanic. 2.3 Libraries First we’ll load some R libraries (packages) that contain useful functions that will make our analyses quicker and more efficient. We’ll discuss the functions that these libraries provide, and how to use libraries in general, in greater detail in a future lecture. library(ggplot2) library(readr) library(dplyr) library(tidyr) library(forcats) 2.4 Read data We start by reading in the data from the CSV file. titanic &lt;- read_csv(&quot;~/Downloads/titanic_data.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; pclass = col_integer(), #&gt; survived = col_integer(), #&gt; name = col_character(), #&gt; sex = col_character(), #&gt; age = col_double(), #&gt; sibsp = col_integer(), #&gt; parch = col_integer(), #&gt; ticket = col_character(), #&gt; fare = col_double(), #&gt; cabin = col_character(), #&gt; embarked = col_character(), #&gt; boat = col_character(), #&gt; body = col_integer(), #&gt; home.dest = col_character() #&gt; ) The function read_csv does exactly what it advertises – reads a data set from a CSV file and returns it as an object we can compute on. In this case we assigned the variable name titanic to our data set. Simple enough! 2.5 What’s in the data? The function read_csv returns a table, where the columns represent the variables of interest (e.g. sex, age, etc) and the rows represent individuals or observations. Let’s take a look: titanic #&gt; # A tibble: 1,309 x 14 #&gt; pclass survived name sex age sibsp parch ticket fare cabin #&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1 1 Alle… fema… 29 0 0 24160 211.3 B5 #&gt; 2 1 1 Alli… male 0.9167 1 2 113781 151.6 C22 … #&gt; 3 1 0 Alli… fema… 2 1 2 113781 151.6 C22 … #&gt; 4 1 0 Alli… male 30 1 2 113781 151.6 C22 … #&gt; 5 1 0 Alli… fema… 25 1 2 113781 151.6 C22 … #&gt; 6 1 1 Ande… male 48 0 0 19952 26.55 E12 #&gt; 7 1 1 Andr… fema… 63 1 0 13502 77.96 D7 #&gt; 8 1 0 Andr… male 39 0 0 112050 0 A36 #&gt; 9 1 1 Appl… fema… 53 2 0 11769 51.48 C101 #&gt; 10 1 0 Arta… male 71 0 0 PC 17… 49.50 &lt;NA&gt; #&gt; # ... with 1,299 more rows, and 4 more variables: embarked &lt;chr&gt;, #&gt; # boat &lt;chr&gt;, body &lt;int&gt;, home.dest &lt;chr&gt; If we simply wanted the dimensions of the data we could do: dim(titanic) #&gt; [1] 1309 14 whereas, if we wanted to get a list of the column names in the data we could do: names(titanic) #&gt; [1] &quot;pclass&quot; &quot;survived&quot; &quot;name&quot; &quot;sex&quot; &quot;age&quot; #&gt; [6] &quot;sibsp&quot; &quot;parch&quot; &quot;ticket&quot; &quot;fare&quot; &quot;cabin&quot; #&gt; [11] &quot;embarked&quot; &quot;boat&quot; &quot;body&quot; &quot;home.dest&quot; 2.5.1 Simple data wrangling Two variables of interest to us are pclass (“passenger class”) and survived. These are categorical variables encoded as numbers. Before exploring the data we’re going to create derived “factor” variables from these, which will make our analyses more convenient. I’m also going to recode the “survived” information as the classes “died” and “lived”. titanic &lt;- mutate(titanic, passenger.class = fct_recode(as.factor(pclass), &quot;1st&quot; = &quot;1&quot;, &quot;2nd&quot; = &quot;2&quot;, &quot;3rd&quot; = &quot;3&quot;), survival = fct_recode(as.factor(survived), &quot;died&quot; = &quot;0&quot;, &quot;lived&quot; = &quot;1&quot;)) Having added to new variables to our data set, the dimensions and column names have changed: dim(titanic) #&gt; [1] 1309 16 and names(titanic) #&gt; [1] &quot;pclass&quot; &quot;survived&quot; &quot;name&quot; #&gt; [4] &quot;sex&quot; &quot;age&quot; &quot;sibsp&quot; #&gt; [7] &quot;parch&quot; &quot;ticket&quot; &quot;fare&quot; #&gt; [10] &quot;cabin&quot; &quot;embarked&quot; &quot;boat&quot; #&gt; [13] &quot;body&quot; &quot;home.dest&quot; &quot;passenger.class&quot; #&gt; [16] &quot;survival&quot; Note that there are now 16 columns in our data, the original 14 plus our two new derived variables passenger.class and survival. 2.6 Categorizing passengers Let’s start by exploring various aspects of the 1309 passengers in our data set. First, let’s look at the gender breakdown: count(titanic, sex) #&gt; # A tibble: 2 x 2 #&gt; sex n #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 female 466 #&gt; 2 male 843 We could also represent this data as a bar graph (though a simple table is more efficient in this case): ggplot(titanic) + geom_bar(aes(x = sex, fill = sex)) Both our table and bar graph tell us that there are almost twice as many men in our data set as women. 2.6.1 How many people survived? Now let’s look at survival information: count(titanic, survival) #&gt; # A tibble: 2 x 2 #&gt; survival n #&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 died 809 #&gt; 2 lived 500 ggplot(titanic) + geom_bar(aes(x = survival)) We see that more that in the data we have at hand, roughly 60% (809 of 1309) of the passengers died. 2.6.2 Women first? We can take our simple explorations a step further, by considering the counts of passengers with respect to multiple variables. Let’s look at the relationship between gender and survival: count(titanic, sex, survival) #&gt; # A tibble: 4 x 3 #&gt; sex survival n #&gt; &lt;chr&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 female died 127 #&gt; 2 female lived 339 #&gt; 3 male died 682 #&gt; 4 male lived 161 2.6.2.1 Contingency tables When looking at counts of multiple variables simultaneously, a more traditional representation than the one above is a “contingency table”. The cells in a contingency table give the counts of individuals with respect to combinations of variables (e.g. # of women who survived, # of women who died, etc). Here’s the same data on sex and survival represented as a contingency table: count(titanic, sex, survival) %&gt;% spread(survival, n) #&gt; # A tibble: 2 x 3 #&gt; sex died lived #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 female 127 339 #&gt; 2 male 682 161 In the code above the symbol %&gt;% can be read as “pipe” or “send”. The pipe operator inserts the object before the pipe as the first argument to the function after the pipe. Here we’re piping the output of the count function as the input into the spread function. We’ll see in later lectures that piping objects makes for very powerful workflows when we do more sophisticated analyses. We can also create a bar plot to represent the contingency table: ggplot(titanic) + geom_bar(aes(sex, fill = survival)) Here we’re already starting to see an interesting pattern – there were nearly twice as many men on the Titanic as women, but proportionally and in absolute numbers more women survived. 2.6.3 A bar plot using proportions rather than counts Sometimes it’s useful to look at proportions rather than absolute numbers. Here’s a figure that allows us to visually assess the different proportions of men and women passengers who survived: ggplot(titanic) + geom_bar(aes(sex, fill = survival), position = &quot;fill&quot;) 2.6.4 Mosaic plots A slightly more sophisticated version of a bar plot is called a “mosaic plot”. A mosaic plot is similar to a proportional bar plot but the width of the bars also varies, indicating the relative numbers of observations in each class. To create a mosaic plot we need to import the geom_mosaic function from a library called ggmosaic. library(ggmosaic) ggplot(titanic) + geom_mosaic(aes(x = product(sex), fill = survival)) + labs(x = &quot;Sex&quot;, y = &quot;Proportion surviving&quot;) As you can see, the mosaic plot emphasizes both that there were more men than women on the Titanic, as well as the fact that a greater fraction of women survived. This seems like strong evidence for the first part of the phrase “Women and children first”. 2.7 Passenger ages Now let’s create a visualiztion to get a handle on the ages of passengers on the Titanic. A histogram is a common way to visualize the distribution of a continuous variable. Creating a histogram is a simple modification of our earlier examples where we created bar plots. ggplot(titanic) + geom_histogram(aes(x = age), bins = 35) The histogram provides a quick visual representation of the frequency of different age groups. It appears that the the most common (modal) value of age is a little over 20 years old. We can explicitly calculate the mean and median age as follows: mean(titanic$age, na.rm = TRUE) #&gt; [1] 29.88113 median(titanic$age, na.rm = TRUE) #&gt; [1] 28 Note that we have to explicitly tell the mean and median functions to drop any missing (NA) values. Alternately, we could have use pipes to calculate the mean and median as so: titanic %&gt;% filter(!is.na(age)) %&gt;% summarize(mean(age), median(age)) #&gt; # A tibble: 1 x 2 #&gt; `mean(age)` `median(age)` #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 29.88 28 2.8 How does age relate to survival? Now we turn to the question of how age relates to the probability of survival. Age is a continuous variable, while survival is a binary variable. 2.8.1 Strip charts We’ll start by creating “strip charts” that plot age on the y-axis, and survival on the x-axis. First we filter out individuals for which we have no age data, then we use a pipe to send the filtered data to the ggplot function: titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_jitter(aes(survival, age), width = 0.1, alpha = 0.5) Recall that sex was an important variable in our earlier assessment of the data. Let’s create a second strip plot that takes into account both age and sex. titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_jitter(aes(survival, age, color = sex), width = 0.1, alpha = 0.5) + facet_wrap(~sex) 2.8.2 Box plots Another way to look at the data is to use a summary figure called a “box plot”. First the simple boxplot, relating age and survival: titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_boxplot(aes(survival, age)) A box plot depicts information about the median value (thick central line), the first and third quartiles (lower 25% value, upper 75% value) and outliers. From this simple boxplot, it doesn’t look like there is a great difference in the age distribution of passengers who lived vs died. Now we look at box plott for age-by-survival, conditioned on sex. titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot() + geom_boxplot(aes(survival, age, fill = sex)) + facet_wrap(~sex) Here we start to see a more interesting pattern. When comparing male passengers, the median age of survivors appears to be a little younger than those who died. However, when comparing female passengers the opposite pattern seems to be at play. 2.8.3 Fitting a model relating survival to age and sex We can get more sophisticated by fitting a formal model to our data. Here we use a technique called logistic regression to model the probability of survival as a function of age, broken down for female and male passengers separately. titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot(aes(x = age, y = survived, color = sex)) + geom_jitter(height = 0.05, alpha = 0.35) + geom_smooth(method=&quot;glm&quot;, method.args = list(family=&quot;binomial&quot;)) + facet_wrap(~sex) + labs(x = &quot;Age&quot;, y = &quot;Probability of survival&quot;) The logistic regression model fit here, seems to support the trend we saw in the box plots. When breaking the data down by sex we find that there is a decreasing probability of survival as age increases for male passengers, but the opposite trend for female passengers. This is pretty interesting – “children first” seemed to hold for men but not for women. 2.9 How does class affect survival? A passenger’s ticket class (a proxy for socioeconomic status) is another interesting variable to consider in conjunction with sex and survival. First, let’s consider class on its own. count(titanic, passenger.class) #&gt; # A tibble: 3 x 2 #&gt; passenger.class n #&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 1st 323 #&gt; 2 2nd 277 #&gt; 3 3rd 709 And as a bar graph: ggplot(titanic) + geom_bar(aes(x = passenger.class)) Both our table and bar graph tell us that the largest number of passengers (in the available data) were travelling on third-class tickets. The numbers of first- and second-class ticketed passengers are fairly similar. 2.9.1 Combining Sex and Class Here is a bar plot that takes into account sex, class, and survival by representing passenger class as a “facet” variable – we create different subplots for each class grouping. ggplot(titanic) + geom_bar(aes(sex, fill = survival), position = &quot;fill&quot;) + facet_wrap(~ passenger.class) + labs(y = &quot;Portion Died/Lived&quot;, title = &quot;Titanic Survival by Sex and Class&quot;) 2.9.2 Extending the logistic regression model to consider class, age, sex, and survival As a final example, let generate a visualization and model to jointly consider how sex, age, and class affected survival on the Titanic. Here we treat both sex and passenger class as faceting variables, fitting six different logistic regression models (all combinations of the three classes and two sexes). titanic %&gt;% filter(!is.na(age)) %&gt;% ggplot(aes(x = age, y = survived, color = sex)) + geom_jitter(height = 0.05, alpha = 0.35) + geom_smooth(method=&quot;glm&quot;, method.args = list(family=&quot;binomial&quot;)) + facet_grid(passenger.class~sex) + labs(x = &quot;Age&quot;, y = &quot;Probability of survival&quot;) By conditioning on both sex and ticketing class, we gain even more insights into the data and our assesments of relationships between variables can change. For female passengers, ticketed class appears to have a strong influence on the relationship between age and survival. We see that almost all of the female first-class passengers survived, and the relationship between age and survival is thus flat. The second class female passengers are fairly similar, though with a slight decrease in the probability of survival among the oldest passengers. It’s not until we get to the third class passengers that we see a strong indication of the “children first” relationship playing out in terms of survival. For the male passengers, the “children first” model seems to fit across classes, but note the generally lower probability of survival across ages when comparing first and third class passengers. 2.10 Conclusion We’ve only scratched the surface of the possible explorations we could undertake of this intersting data set. However, this introductory “data story” illustrates many of the tools and ideas we’ll encounter in this class. You’ll be undertaking even more complex data explorations on your own by the end of the semester! "],
["getting-started-with-r.html", "Chapter 3 Getting Started with R 3.1 What is R? 3.2 What is RStudio? 3.3 Entering commands in the console 3.4 Comments 3.5 Using R as a Calculator 3.6 Data types 3.7 Variable assignment in R 3.8 Logical values 3.9 The R Help System 3.10 Packages 3.11 Reading data from a file 3.12 Exploring the “possums” data set 3.13 Simple tables 3.14 Simple figures 3.15 Bar plots 3.16 Histograms 3.17 Scatter plots", " Chapter 3 Getting Started with R 3.1 What is R? R is a statistical computing environment and programming language. It is free, open source, and has a large and active community of developers and users. There are many different R packages (libraries) available for conducting a wide variety of different analyses, for everything from genome sequence data to geospatial information. 3.2 What is RStudio? RStudio (http://www.rstudio.com/) is an open source integrated development environment (IDE) that provides a nicer graphical interface to R than does the default R GUI. The figure below illustrates the RStudio interface, in its default configuration. For the exercises in this chapter you’ll be primarily entering commands in the “console” window. We’ll review key parts of the RStudio interface in greater detail in class. Figure 3.1: RStudio window with the panes labeled 3.3 Entering commands in the console You can type commands directly in the console. When you hit Return (Enter) on your keyboard the text you typed is evaluated by the R interpreter. This means that the R program reads your commands, makes sure there are no syntax errors, and then carries out any commands that were specified. Try evaluating the following arithmetic commands in the console: 10 + 5 10 - 5 10 / 5 10 * 5 If you type an incomplete command and then hit Return on your keyboard, the console will show a continuation line marked by a + symbol. For example enter the incomplete statement (10 + 5 and then hit Enter. You should see something like this. &gt; (10 + 5 + The continuation line tells you that R is waiting for additional input before it evaluates what you typed. Either complete your command (e.g. type the closing parenthesis) and hit Return, or hit the “Esc” key to exit the continuation line without evaluating what you typed. 3.4 Comments When working in the R console, or writing R code, the pound symbol (#) indicates the start of a comment. Anything after the #, up to the end of the current line, is ignored by the R interpretter. # This line will be ignored 5 + 4 # the first part of this line, up to the #, will be evaluated 2 # * 3 + 4 * 5 Throughout this course I will often include short explanatory comments in the code examples. 3.5 Using R as a Calculator The simplest way to use R is as a fancy calculator. 10 + 2 # addition 10 - 2 # subtraction 10 * 2 # multiplication 10 / 2 # division 10 ^ 2 # exponentiation 10 ** 2 # alternate exponentiation pi * 2.5^2 # R knows about some constants such as Pi 10 %% 3 # modulus operator -- gives remainder after division 10 %/% 3 # integer division Be aware that certain operators have precedence over others. For example multiplication and division have higher precedence than addition and subtraction. Use parentheses to disambiguate potentially confusing statements. (10 + 2)/4-5 # was the output what you expected? (10 + 2)/(4-5) # compare the answer to the above Division by zero produces an object that represents infinite numbers. Infinite values can be either positive or negative 1/0 # Inf -1/0 # -Inf Invalid calculations produce a objected called NaN which is short for “Not a Number”: 0/0 # invalid calculation 3.5.1 Common mathematical functions Many commonly used mathematical functions are built into R. Here are some examples: abs(-3) # absolute value abs(3) cos(pi/3) # cosine sin(pi/3) # sine log(10) # natural logarithm log10(10) # log base 10 log2(10) # log base 2 exp(1) # exponential function sqrt(10) # square root 10 ^ 0.5 # same as square root 3.6 Data types All of our arithmetic examples above produced numerical values. The default numerical data type in R is called a “double”. “double” is short for “double precision floating point value” which refers to the numerical precision that R uses when carrying out calculations. R has a function called typeof() that we can use to get information about an object’s type. Let’s illustrate the use of typeof() and confirm that our numerical calculations return objects of the “double” type: typeof(10) typeof(10.5) typeof(4 * 5) 3.7 Variable assignment in R An important concept in all programming languages is that of “variable assignment”. Variable assignment is the act of creating labels that point to particular data values in a computers memory, which allows us to apply operations to the labels rather than directly to specific values. Variable assignment is an important mechanism of abstracting and generalizing computational operations. Variable assignment in R is accomplished with the assignment operator, which is designated as &lt;- (left arrow, constructed from a left angular bracket and the minus sign). This is illustrated below: x &lt;- 10 # assign the variable name &#39;x&#39; the value 10 sin(x) # apply the sin function to the value x points to x &lt;- pi # x now points to a different value sin(x) # the same function call now produces a different result 3.7.1 Valid variable names As described in the R documentation, “A syntactically valid name consists of letters, numbers and the dot or underline characters and starts with a letter or the dot not followed by a number. Names such as ‘.2way’ are not valid, and neither are the reserved words.” Here are some examples of valid and invalid variable names. Mentally evaluate these based on the definition above, and then evaluate these in the R interpetter to confirm your understanding : x &lt;- 10 x.prime &lt;- 10 x_prime &lt;- 10 my.long.variable.name &lt;- 10 another_long_variable_name &lt;- 10 _x &lt;- 10 .x &lt;- 10 2.x &lt;- 2 * x 3.8 Logical values When we compare values to teach other, our calculations no longer return “doubles” but rather TRUE and FALSE values. This is illustrated below: 10 &lt; 9 # is 10 less than 9? 10 &gt; 9 # is 10 greater than 9? 10 &lt;= (5 * 2) # less than or equal to? 10 &gt;= pi # greater than or equal to? 10 == 10 # equals? 10 != 10 # does not equal? TRUE and FALSE objects are of “logical” data type (known as “Booleans” in many other languages, after the mathematician George Boole). typeof(TRUE) typeof(FALSE) When working with numerical data, tests of equality can be tricky. For example, consider the following two comparisons: 10 == (sqrt(10)^2) # Surprised by the result? See below. 4 == (sqrt(4)^2) # Even more confused? Mathematically we know that both \\((\\sqrt{10})^2 = 10\\) and \\((\\sqrt{4})^2 = 4\\) are true statements. Why does R tell us the first statement is false? What we’re running into here are the limits of computer precision. A computer can’t represent \\(\\sqrt 10\\) exactly, whereas \\(\\sqrt 4\\) can be exactly represented. Precision in numerical computing is a complex subject and a detailed discussion is beyond the scope of this course. However, it’s important to be aware of this limitation (this limitation is true of any programming language, not just R). To test “near equality” R provides a function called all.equal(). This function takes two inputs – the numerical values to be compared – and returns True if their values are equal up to a certain level of tolerance (defined by the built-in numerical precision of your computer). all.equal(10, sqrt(10)^2) 3.8.1 Logical operators Logical values support Boolean operations, like logical negation (“not”), “and”, “or”, “xor”, etc. This is illustrated below: x &lt;- TRUE y &lt;- FALSE !x # logical negation -- reads as &quot;not x&quot; x &amp; y # AND: are x and y both TRUE? x | y # OR: are either x or y TRUE? xor(x,y) # XOR: is either x or y TRUE, but not both? The function isTRUE is sometimes useful: x &lt;- 5 y &lt;- 10 z &lt;- x &gt; y isTRUE(z) 3.9 The R Help System R comes with fairly extensive documentation and a simple help system. You can access HTML versions of the R documentation under the Help tab in Rstudio. The HTML documentation also includes information on any packages you’ve installed. Take a few minutes to browse through the R HTML documentation. In addition to the HTML documentation there is also a search box where you can enter a term to search on (see red arrow in figure below). Figure 3.2: The RStudio Help tab 3.9.1 Getting help from the console In addition to getting help from the RStudio help tab, you can directly search for help from the console. The help system can be invoked using the help function or the ? operator. help(&quot;log&quot;) ?log If you are using RStudio, the help results will appear in the “Help” tab of the Files/Plots/Packages/Help/Viewer (lower right window by default). What if you don’t know the name of the function you want? You can use the help.search() function. help.search(&quot;log&quot;) In this case help.search(&quot;log&quot;) returns all the functions with the string log in them. For more on help.search type ?help.search. Other useful help related functions include apropos() and example(). apropos returns a list of all objects (including function names) in the current session that match the input string. apropos(&quot;log&quot;) example() provides examples of how a function is used. example(log) 3.10 Packages Packages are libraries of R functions and data that provide additional capabilities and tools beyond the standard library of functions included with R. Hundreds of people around the world have developed packages for R that provide functions and related data structures for conducting many different types of analyses. Throughout this course you’ll need to install a variety of packages. Here I show the basic procedure for installing new packages from the console as well as from the R Studio interface. 3.10.1 Installing packages from the console The built-in function install.packages provides a quick and conveniet way to install packages from the R console. 3.10.2 Install the tidyverse package To illustrate the use of install.package, we’ll install a collection of packages (a “meta-package”) called the tidyverse. Here’s how to install the tidyverse meta-package from the R console: install.packages(&quot;tidyverse&quot;, dependencies = TRUE) The first argument to install.packages gives the names of the package we want to install. The second argument, dependencies = TRUE, tells R to install any additional packages that tidyverse depends on. 3.10.3 Installing packages from the RStudio dialog You can also install packages using a graphical dialog provided by RStudio. To do so pick the Packages tab in RStudio, and then click the Install button. Figure 3.3: The Packages tab in RStudio In the packages entry box you can type the name of the package you wish to install. 3.10.4 Loading packages with the library() function Once a package is installed on your computer, the package can be loaded into your R session using the library function. To insure our previous install commands worked correctly, let’s load the packages we just installed. library(tidyverse) Since the tidyverse pacakge is a “meta-package” it provides some additional info about the sub-packages that got loaded. When you load tidyverse, you will also see a message about “Conflicts” as several of the functions provided in the dplyr package (a sub-package in tidyverse) conflict with names of functions provided by the “stats” package which usually gets automically loaded when you start R. The conflicting funcdtions are filter and lag. The conflicting functions in the stats package are lag and filter which are used in time series analysis. The dplyr functions are more generally useful. Furthermore, if you need these masked functions you can still access them by prefacing the function name with the name of the package (e.g. stats::filter). 3.11 Reading data from a file We’ll use the read_csv function defined in the readr package (loaded via tidyverse) to read a CSV formatted data file. We’ll load a data file called possums.csv. possums &lt;- read_csv(&quot;https://tinyurl.com/bio304-possums-csv&quot;) The possums data set includes information from a study of mountain brushtail possums (Trichosurus caninus; Lindenmayer DB et al. 1995, Australian Journal of Zoology 43, 449-458.) The investigators recorded variables about individual possum’s sex, age, where they were collected, and a range of morphological measurements. For example the variable skullw is the width of the skull, taill is tail length, etc. Notice that we read the CSV file directly from a remote file via a URL. If instead, you wanted to load a local file on your computer you would specify the “path” – i.e. the location on your hard drive where you stored the file. For example, here is how I would load the same file if it was stored in the standard downloads directory on my Mac laptop: # this assumes you&#39;re running a local version of R (i.e. on your laptop) possums &lt;- read_csv(&quot;/Users/pmagwene/Downloads/possums.csv&quot;) 3.12 Exploring the “possums” data set Let’s take a moment to explore the possums data set. First, how big is it? The dim function will tell us the dimensions (# of rows and columns) of the data table we loaded: dim(possums) What are the names of the columns of the table? names(possums) 3.13 Simple tables Let’s use the count function to count the number of male and female possums and the number collected from each of the populations of interest in this study (Victoria and “other”): count(possums, sex) count(possums, Pop) We can break down the counts by population and sex combinined by specifying both variables: count(possums, Pop, sex) How do the results differ if instead you write count(possums, sex, Pop)? Finally, let’s get counts for the different age groups in the study: count(possums, age) Notice that besides the nine age groups, there is a grouping for “NA”. “NA” means “not available” and is the standard designation for missing values. This table tells us there are two possums for which age estimates were not available. 3.14 Simple figures Throughout this course we’ll use a package called “ggplot2” to generate figures. The ggplot2 package is part of the tidyverse and is automatically loaded when we load the tidyverse library. In the code below, we’ll demonstrate how to use ggplot by example. In a later lecture we’ll go into greater detail about how ggplot is structured and the broader conceptual framework that underpins its design. 3.15 Bar plots First let’s create some simple bar plots as alternate representations of the counts: ggplot(possums) + geom_bar(aes(x = sex)) ggplot(possums) + geom_bar(aes(x = Pop)) ggplot(possums) + geom_bar(aes(x = Pop, fill = sex)) 3.16 Histograms A histogram is a special type of bar plot, typically used with continuous data. In a histogram, we divide the range of the data into bins of a given size, and use vertical bars to depict the frequency (count) of observations that fall into each bin. This gives a good sense of the intervals in which most of the observations are found. Here is a histogram for the skull width data: ggplot(possums) + geom_histogram(aes(x = skullw)) #&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Notice the warning message that was generated, about the default number of bins that were used. ggplot is alerting us that that we may want to consider regenerating the plot with a different number of bins. Let’s try a smaller number of bins: ggplot(possums) + geom_histogram(aes(x = skullw), bins = 20) Try creating histograms for taill and totlngth. 3.17 Scatter plots A scatter plot is typically used to represent two numerical variables simultaneously. Each point in a scatter plot is an individual in the data set, and the location of the points represent the measured values of the variables of interest on that individual. ggplot(possums) + geom_point(aes(x = totlngth, y = taill)) We can add information about categorical variables to our scatter plot by using color or shape to depict different classes ggplot(possums) + geom_point(aes(x = totlngth, y = taill, color = Pop)) We can represent more than two categorical variables in our scatter plot by using both shape and color. We’ll also change the size and transparency of the plotted points (via the alpha argument). ggplot(possums) + geom_point(aes(x = totlngth, y = taill, color = Pop, shape = sex), size = 2, alpha = 0.75) Explore some of the other bivariate relationships in the possums data by creating additional scatter plots. Given 9 numerical variables, how many distinct pairwise scatter plots could you create? "]
]
